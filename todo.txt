===Core===
- reflection ресурсов из шейдера
- установка ресурсов
- константные буферы, версионирование per draw, per deferred frame, per context. установка по номеру слота (DirectX style)
- установка PSO:
	- depth test on\off write
	- cull mode
	- fill mode
	- blend
	...
- checksum PSO
- resize window baсkbuffers
- ручной эмитинг барьеров
- загрузка текстур
- установка RT
- статистика. возможно per context, общая
- полный стейт. сохрание\восстановление
- unordered
- структурные буферы
- несколько окон
- compute shaders
- 3d, cube текстуры
- query
- несколько command context (+многопоток)
- raytracing api
- одновременная работа с несколькими адаптерами
===Опционально===
- MSAA
- hot reload всего
- runtime change num deferred frames
- подумать над асинхронной компиляцией шейдеров и созданием PSO

===High level===
- gpu profiler 
 - очень подробная низкоуровневая инфа, графики, память
 - возможность замерять части выскоуровневого рендера. вывод в виде колбасы
- frame graph, возможность работы совмещать frame graph и low level (в зависимости от сложности ситуации)
- установка юниформов по имени (OpenGL style). да и всех остальных ресурсов тогда уж?

===Тесты сравнение перфа с directx 11===
- GetData() для буфера внутри рендера
- константный буфер с кучей обновлений
- сжатие миллиарда картинок
- рендер в кубмапу, в разные стороны и мипы
- генерация мипов 2d, cube
- deferred
- много уникальных аллокаций за фрейм
- dynamic mesh, texture
- state changes, много уникальных шейдеров
- многократное использование текстуры RTV-SRV-UAV
